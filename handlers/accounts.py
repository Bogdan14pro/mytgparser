import logging
from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.text import Text
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import (
    SessionPasswordNeededError,
    PhoneCodeExpiredError,
    PhoneCodeInvalidError,
    FloodWaitError,
    ApiIdInvalidError,
    AuthRestartError,
    PasswordHashInvalidError,
    RPCError
)
from telethon.tl.types import User
from typing import Tuple, Optional
import asyncio

import config
from services.account_manager import account_mgr
from models import AddAccountStates, \
    check_is_admin, validate_phone_number, validate_api_id, validate_api_hash # –û–±–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã

logger = logging.getLogger(__name__)

#  –≥–ª–æ–±–∞–ª Future –¥–ª—è –∫–∞–ª–ª–±—ç–∫–æ–≤
telethon_futures: dict[int, asyncio.Future] = {}


async def get_main_menu_content(user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é.
    """
    kb_rows = [
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", callback_data="m_acc")],
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–±–æ—Ä", callback_data="m_start_scraping")],
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="m_start_inviting")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="m_tasks")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π", callback_data="m_settings")]
    ]
    kb_rows.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="close_menu")])

    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    text = (
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {user_id}!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    return text, kb

async def get_accounts_menu_content() -> Tuple[str, InlineKeyboardMarkup]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.
    """
    accounts = account_mgr.accounts
    text = "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:</b>\n\n"
    if not accounts:
        text += "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_acc")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
        ])
    else:
        for i, acc in enumerate(accounts):
            status = "‚úÖ"
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞
                if not acc.is_busy and not await acc.is_authorized():
                    status = "‚ùå"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {acc.phone}: {e}")
                status = "‚ö†Ô∏è" # –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            text += f"{i + 1}. {status} <code>{acc.phone}</code> (ID: <code>{acc.user_id or 'N/A'}</code>)\n"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_acc")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="del_acc")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="list_acc")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
        ])
    return text, kb

@check_is_admin
async def cmd_menu(message: types.Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /menu."""
    text, kb = await get_main_menu_content(message.from_user.id)
    await message.answer(text, reply_markup=kb)

@check_is_admin
async def go_to_main_menu(c: types.CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    text, kb = await get_main_menu_content(c.from_user.id)
    await c.message.edit_text(text, reply_markup=kb)
    await c.answer()

@check_is_admin
async def close_menu(c: types.CallbackQuery):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é."""
    await c.message.delete()
    await c.answer()


@check_is_admin
async def cancel_all(c: types.CallbackQuery, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id = c.from_user.id
    if user_id in telethon_futures and not telethon_futures[user_id].done():
        telethon_futures[user_id].set_result(None)
    await state.clear()
    await c.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await go_to_main_menu(c, state)

@check_is_admin
async def menu_accounts(c: types.CallbackQuery):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏."""
    text, kb = await get_accounts_menu_content()
    await c.message.edit_text(text, reply_markup=kb)
    await c.answer()


@check_is_admin
async def add_acc_start(c: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await c.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79XXXXXXXXX):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await state.set_state(AddAccountStates.phone)
    await c.answer()

@check_is_admin
async def add_acc_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = message.text.strip()
    if not validate_phone_number(phone):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79XXXXXXXXX:")
        return

    await state.update_data(phone=phone)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ API ID (—á–∏—Å–ª–æ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await state.set_state(AddAccountStates.api)

@check_is_admin
async def add_acc_api(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API ID –∏ –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    api_id_str = message.text.strip()
    if not validate_api_id(api_id_str):
        await message.answer("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API ID:")
        return

    await state.update_data(api_id=int(api_id_str))

    data = await state.get_data()
    phone = data['phone']
    api_id = data['api_id']

    await message.answer("–í–≤–µ–¥–∏—Ç–µ API Hash (32 —Å–∏–º–≤–æ–ª–∞):",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                         ]))
    await state.set_state(AddAccountStates.password)

@check_is_admin
async def add_acc_api_hash(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ API Hash –∏ –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    api_hash = message.text.strip()
    if not validate_api_hash(api_hash):
        await message.answer("API Hash –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 32 —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API Hash:")
        return

    await state.update_data(api_hash=api_hash)

    data = await state.get_data()
    phone = data['phone']
    api_id = data['api_id']
    api_hash = data['api_hash']

    user_id = message.from_user.id
    telethon_futures[user_id] = asyncio.Future()

    processing_message = await message.answer("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞... –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è.")

    try:
        # —Ä—è–ª—å–Ω–∞
        account = await account_mgr.add_account(
            phone=phone,
            api_id=api_id,
            api_hash=api_hash,
            bot_instance=bot,
            chat_id=user_id,
            fsm_state=state
        )
        await processing_message.edit_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <code>{account.phone}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except PhoneCodeExpiredError:
        await processing_message.edit_text("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
    except PhoneCodeInvalidError:
        await processing_message.edit_text("‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
    except ApiIdInvalidError:
        await processing_message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API ID –∏–ª–∏ API Hash. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except SessionPasswordNeededError:
        await processing_message.edit_text("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA), –Ω–æ –ø–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
    except PasswordHashInvalidError:
        await processing_message.edit_text("‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π 2FA-–ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
    except FloodWaitError as e:
        await processing_message.edit_text(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except AuthRestartError:
        await processing_message.edit_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
    except asyncio.TimeoutError:
        await processing_message.edit_text("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ.")
    except ValueError as e:
        await processing_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.", exc_info=True)
        await processing_message.edit_text(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: {e}")
    finally:
        await state.clear()
        if user_id in telethon_futures:
            del telethon_futures[user_id]
        text, kb = await get_accounts_menu_content()
        await message.answer(text, reply_markup=kb)


@check_is_admin
async def add_acc_code(message: types.Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telethon."""
    user_id = message.from_user.id
    if user_id in telethon_futures and not telethon_futures[user_id].done():
        telethon_futures[user_id].set_result(message.text.strip())
        await state.set_state(None)
    else:
        await message.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()


@check_is_admin
async def add_acc_password(message: types.Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 2FA-–ø–∞—Ä–æ–ª—è Telethon."""
    user_id = message.from_user.id
    if user_id in telethon_futures and not telethon_futures[user_id].done():
        telethon_futures[user_id].set_result(message.text.strip())
        await state.set_state(None)
    else:
        await message.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()


async def telethon_code_callback(chat_id: int, fsm_state: FSMContext, bot_instance: Bot) -> str:
    """
    –ö–æ–ª–ª–±—ç–∫ –¥–ª—è Telethon, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Aiogram.
    """
    await bot_instance.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram:")
    await fsm_state.set_state(AddAccountStates.code)
    future = telethon_futures[chat_id]
    try:
        code = await asyncio.wait_for(future, timeout=config.AUTH_TIMEOUT_SEC)
        if code is None:
            raise asyncio.TimeoutError
        return code
    except asyncio.TimeoutError:
        await bot_instance.send_message(chat_id, "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        raise
    except Exception:
        raise

async def telethon_password_callback(chat_id: int, fsm_state: FSMContext, bot_instance: Bot) -> str:
    """
    –ö–æ–ª–ª–±—ç–∫ –¥–ª—è Telethon, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç 2FA-–ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Aiogram.
    """
    await bot_instance.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA):")
    await fsm_state.set_state(AddAccountStates.password)
    future = telethon_futures[chat_id]
    try:
        password = await asyncio.wait_for(future, timeout=config.AUTH_TIMEOUT_SEC)
        if password is None:
            raise asyncio.TimeoutError
        return password
    except asyncio.TimeoutError:
        await bot_instance.send_message(chat_id, "‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ 2FA-–ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        raise
    except Exception:
        raise


@check_is_admin
async def del_acc_start(c: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: –∑–∞–ø—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞."""
    accounts = account_mgr.accounts
    if not accounts:
        await c.message.answer("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await c.answer()
        return

    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n"
    for i, acc in enumerate(accounts):
        text += f"{i + 1}. <code>{acc.phone}</code>\n"

    await c.message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await state.set_state(AddAccountStates.delete_confirm)
    await c.answer()

@check_is_admin
async def del_acc_confirm(message: types.Message, state: FSMContext):
    """–ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    user_input = message.text.strip()
    accounts = account_mgr.accounts

    if not user_input.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ (—á–∏—Å–ª–æ).")
        return

    idx = int(user_input) - 1

    if not (0 <= idx < len(accounts)):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    try:
        phone_to_delete = accounts[idx].phone
        account_mgr.delete(idx)
        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <code>{phone_to_delete}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except IndexError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    finally:
        await state.clear()
        text, kb = await get_accounts_menu_content()
        await message.answer(text, reply_markup=kb)


@check_is_admin
async def list_accounts(c: types.CallbackQuery):
    accounts = account_mgr.accounts
    if not accounts:
        await c.message.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
    else:
        text = "<b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
        for i, acc in enumerate(accounts):
            status = "‚úÖ"
            try:
                if not acc.is_busy and not await acc.is_authorized():
                    status = "‚ùå"
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {acc.phone}: {e}")
                status = "‚ö†Ô∏è"
            text += f"{i + 1}. {status} <code>{acc.phone}</code> (ID: <code>{acc.user_id or 'N/A'}</code>)\n"

        await c.message.answer(text)
    await c.answer()


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_menu, Command(commands=["start", "menu"]))
    dp.callback_query.register(go_to_main_menu, Text("menu"))
    dp.callback_query.register(cancel_all, Text("cancel"))
    dp.callback_query.register(close_menu, Text("close_menu"))
    dp.callback_query.register(menu_accounts, Text("m_acc"))
    dp.callback_query.register(add_acc_start, Text("add_acc"))
    dp.message.register(add_acc_phone, AddAccountStates.phone)
    dp.message.register(add_acc_api, AddAccountStates.api)
    dp.message.register(add_acc_api_hash, AddAccountStates.password)
    dp.message.register(add_acc_code, AddAccountStates.code)
    dp.message.register(add_acc_password, AddAccountStates.password)
    dp.callback_query.register(del_acc_start, Text("del_acc"))
    dp.message.register(del_acc_confirm, AddAccountStates.delete_confirm)
    dp.callback_query.register(list_accounts, Text("list_acc"))